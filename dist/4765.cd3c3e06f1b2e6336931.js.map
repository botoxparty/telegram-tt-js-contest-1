{"version":3,"file":"4765.cd3c3e06f1b2e6336931.js","mappings":"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","sources":["webpack://telegram-t/./src/components/ui/AvatarEditable.tsx","webpack://telegram-t/./src/components/ui/CheckboxGroup.tsx","webpack://telegram-t/./src/components/ui/ConfirmDialog.tsx","webpack://telegram-t/./src/components/ui/CropModal.tsx","webpack://telegram-t/./src/components/ui/Draggable.module.scss?804f","webpack://telegram-t/./src/components/ui/Draggable.tsx","webpack://telegram-t/./src/components/ui/FloatingActionButton.tsx","webpack://telegram-t/./src/components/ui/RoundTimer.module.scss?7ffc","webpack://telegram-t/./src/components/ui/RoundTimer.tsx","webpack://telegram-t/./src/components/ui/Notification.tsx","webpack://telegram-t/./src/components/ui/ProgressSpinner.tsx","webpack://telegram-t/./src/components/ui/Radio.tsx","webpack://telegram-t/./src/components/ui/RadioGroup.tsx","webpack://telegram-t/./src/components/ui/RangeSlider.tsx","webpack://telegram-t/./src/components/ui/RangeSliderWithMarks.module.scss?5535","webpack://telegram-t/./src/components/ui/RangeSliderWithMarks.tsx","webpack://telegram-t/./src/components/ui/ResponsiveHoverButton.tsx","webpack://telegram-t/./src/components/ui/SearchInput.tsx","webpack://telegram-t/./src/components/ui/Select.tsx","webpack://telegram-t/./src/components/ui/SelectAvatar.module.scss?3384","webpack://telegram-t/./src/components/ui/SelectAvatar.tsx","webpack://telegram-t/./src/components/ui/Separator.module.scss?e4cd","webpack://telegram-t/./src/components/ui/Separator.tsx","webpack://telegram-t/./src/components/ui/ShowMoreButton.tsx","webpack://telegram-t/./src/components/ui/Switcher.tsx","webpack://telegram-t/./src/components/ui/TextArea.tsx","webpack://telegram-t/./src/components/ui/TextTimer.tsx","webpack://telegram-t/./src/components/ui/Toggle.module.scss?0590","webpack://telegram-t/./src/components/ui/Toggle.tsx","webpack://telegram-t/./src/components/ui/placeholder/PlaceholderChatInfo.module.scss?3a84","webpack://telegram-t/./src/components/ui/placeholder/PlaceholderChatInfo.tsx","webpack://telegram-t/./src/components/ui/placeholder/Skeleton.tsx"],"sourcesContent":["import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport Icon from '../common/icons/Icon';\nimport CropModal from './CropModal';\n\nimport './AvatarEditable.scss';\n\ninterface OwnProps {\n  title?: string;\n  disabled?: boolean;\n  isForForum?: boolean;\n  currentAvatarBlobUrl?: string;\n  onChange: (file: File) => void;\n}\n\nconst AvatarEditable: FC<OwnProps> = ({\n  title = 'Change your profile picture',\n  disabled,\n  isForForum,\n  currentAvatarBlobUrl,\n  onChange,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n  const [croppedBlobUrl, setCroppedBlobUrl] = useState<string | undefined>(currentAvatarBlobUrl);\n\n  useEffect(() => {\n    setCroppedBlobUrl(currentAvatarBlobUrl);\n  }, [currentAvatarBlobUrl]);\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target?.files?.[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  const handleAvatarCrop = useCallback((croppedImg: File) => {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n\n    if (croppedBlobUrl && croppedBlobUrl !== currentAvatarBlobUrl) {\n      URL.revokeObjectURL(croppedBlobUrl);\n    }\n    setCroppedBlobUrl(URL.createObjectURL(croppedImg));\n  }, [croppedBlobUrl, currentAvatarBlobUrl, onChange]);\n\n  const handleModalClose = useCallback(() => {\n    setSelectedFile(undefined);\n  }, []);\n\n  const labelClassName = buildClassName(\n    croppedBlobUrl && 'filled',\n    disabled && 'disabled',\n    isForForum && 'rounded-square',\n  );\n\n  return (\n    <div className=\"AvatarEditable\">\n      <label\n        className={labelClassName}\n        role=\"button\"\n        tabIndex={0}\n        title={title}\n      >\n        <input\n          type=\"file\"\n          onChange={handleSelectFile}\n          accept=\"image/png, image/jpeg\"\n        />\n        <Icon name=\"camera-add\" />\n        {croppedBlobUrl && <img src={croppedBlobUrl} draggable={false} alt=\"Avatar\" />}\n      </label>\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </div>\n  );\n};\n\nexport default memo(AvatarEditable);\n","import type { ChangeEvent } from 'react';\nimport type { FC, TeactNode } from '../../lib/teact/teact';\nimport React, { memo, useState } from '../../lib/teact/teact';\n\nimport type { ApiUser } from '../../api/types';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Checkbox from './Checkbox';\n\nexport type IRadioOption = {\n  label: TeactNode;\n  subLabel?: string;\n  disabled?: boolean;\n  value: string;\n  nestedOptions?: IRadioOption[];\n  user?: ApiUser;\n};\n\ntype OwnProps = {\n  id?: string;\n  options: IRadioOption[];\n  selected?: string[];\n  disabled?: boolean;\n  nestedCheckbox?: boolean;\n  loadingOptions?: string[];\n  isRound?: boolean;\n  onChange: (value: string[]) => void;\n};\n\nconst CheckboxGroup: FC<OwnProps> = ({\n  id,\n  options,\n  selected = [],\n  disabled,\n  nestedCheckbox,\n  loadingOptions,\n  isRound,\n  onChange,\n}) => {\n  const [values, setValues] = useState<string[]>(selected || []);\n\n  const handleChange = useLastCallback((event: ChangeEvent<HTMLInputElement>, nestedOptionList?: IRadioOption) => {\n    const { value, checked } = event.currentTarget;\n    let newValues: string[];\n\n    if (checked) {\n      newValues = [...values, value];\n      if (nestedOptionList && value) {\n        newValues.push(nestedOptionList.value);\n      }\n      if (nestedOptionList && value === nestedOptionList.value) {\n        nestedOptionList.nestedOptions?.forEach((nestedOption) => {\n          if (!newValues.includes(nestedOption.value)) {\n            newValues.push(nestedOption.value);\n          }\n        });\n      }\n    } else {\n      newValues = values.filter((v) => v !== value);\n      if (nestedOptionList && value === nestedOptionList.value) {\n        nestedOptionList.nestedOptions?.forEach((nestedOption) => {\n          newValues = newValues.filter((v) => v !== nestedOption.value);\n        });\n      } else if (nestedOptionList) {\n        const nestedOptionValues = nestedOptionList.nestedOptions?.map((nestedOption) => nestedOption.value) || [];\n        const hasOtherNestedValuesChecked = nestedOptionValues.some((nestedValue) => newValues.includes(nestedValue));\n        if (!hasOtherNestedValuesChecked) {\n          newValues = newValues.filter((v) => v !== nestedOptionList.value);\n        }\n      }\n    }\n\n    setValues(newValues);\n    onChange(newValues);\n  });\n  const getCheckedNestedCount = useLastCallback((nestedOptions: IRadioOption[]) => {\n    const checkedCount = nestedOptions?.filter((nestedOption) => values.includes(nestedOption.value)).length;\n    return checkedCount > 0 ? checkedCount : nestedOptions.length;\n  });\n\n  return (\n    <div id={id} className=\"radio-group\">\n      {options.map((option) => {\n        return (\n          <Checkbox\n            label={option.label}\n            subLabel={option.subLabel}\n            value={option.value}\n            checked={selected.indexOf(option.value) !== -1}\n            disabled={option.disabled || disabled}\n            isLoading={loadingOptions ? loadingOptions.indexOf(option.value) !== -1 : undefined}\n            onChange={handleChange}\n            nestedCheckbox={nestedCheckbox}\n            nestedCheckboxCount={getCheckedNestedCount(option.nestedOptions ?? [])}\n            nestedOptionList={option}\n            values={values}\n            isRound={isRound}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(CheckboxGroup);\n","import type { FC, TeactNode } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from './Button';\nimport Modal from './Modal';\n\ntype OwnProps = {\n  isOpen: boolean;\n  title?: string;\n  noDefaultTitle?: boolean;\n  header?: TeactNode;\n  textParts?: TextPart;\n  text?: string;\n  confirmLabel?: TeactNode;\n  confirmIsDestructive?: boolean;\n  isConfirmDisabled?: boolean;\n  isOnlyConfirm?: boolean;\n  areButtonsInColumn?: boolean;\n  className?: string;\n  children?: React.ReactNode;\n  confirmHandler: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst ConfirmDialog: FC<OwnProps> = ({\n  isOpen,\n  title,\n  noDefaultTitle,\n  header,\n  text,\n  textParts,\n  confirmLabel = 'Confirm',\n  confirmIsDestructive,\n  isConfirmDisabled,\n  isOnlyConfirm,\n  areButtonsInColumn,\n  className,\n  children,\n  confirmHandler,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const handleSelectWithEnter = useCallback((index: number) => {\n    if (index === -1) confirmHandler();\n  }, [confirmHandler]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, handleSelectWithEnter, '.Button');\n\n  return (\n    <Modal\n      className={buildClassName('confirm', className)}\n      title={(title || (!noDefaultTitle ? lang('Telegram') : undefined))}\n      header={header}\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {text && text.split('\\\\n').map((textPart) => (\n        <p>{textPart}</p>\n      ))}\n      {textParts || children}\n      <div\n        className={areButtonsInColumn ? 'dialog-buttons-column' : 'dialog-buttons mt-2'}\n        ref={containerRef}\n        onKeyDown={handleKeyDown}\n      >\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={confirmHandler}\n          color={confirmIsDestructive ? 'danger' : 'primary'}\n          disabled={isConfirmDisabled}\n        >\n          {confirmLabel}\n        </Button>\n        {!isOnlyConfirm && <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(ConfirmDialog);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\n\nimport { DEBUG } from '../../config';\nimport { blobToDataUri, blobToFile } from '../../util/files';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from './Button';\nimport Loading from './Loading';\nimport Modal from './Modal';\n\nimport './CropModal.scss';\n\n// Change to 'base64' to get base64-encoded string\nconst cropperResultOptions: Croppie.ResultOptions & { type: 'blob' } = {\n  type: 'blob',\n  quality: 1,\n  format: 'jpeg',\n  circle: false,\n  size: { width: 1024, height: 1024 },\n};\n\ntype ICroppie = typeof import('croppie');\nlet Croppie: ICroppie;\nlet croppiePromise: Promise<{ default: ICroppie }>;\n\nasync function ensureCroppie() {\n  if (!croppiePromise) {\n    croppiePromise = import('../../lib/croppie') as unknown as Promise<{ default: ICroppie }>;\n    Croppie = (await croppiePromise).default;\n  }\n\n  return croppiePromise;\n}\n\nlet cropper: Croppie;\n\nasync function initCropper(imgFile: Blob) {\n  try {\n    const cropContainer = document.getElementById('avatar-crop');\n    if (!cropContainer) {\n      return;\n    }\n\n    const { offsetWidth, offsetHeight } = cropContainer;\n\n    cropper = new Croppie(cropContainer, {\n      enableZoom: true,\n      boundary: {\n        width: offsetWidth,\n        height: offsetHeight,\n      },\n      viewport: {\n        width: offsetWidth - 16,\n        height: offsetHeight - 16,\n        type: 'circle',\n      },\n    });\n\n    const dataUri = await blobToDataUri(imgFile);\n    await cropper.bind({ url: dataUri });\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n}\n\ntype OwnProps = {\n  file?: Blob;\n  onChange: (file: File) => void;\n  onClose: () => void;\n};\n\nconst CropModal: FC<OwnProps> = ({ file, onChange, onClose }: OwnProps) => {\n  const [isCroppieReady, setIsCroppieReady] = useState(false);\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n\n    if (!isCroppieReady) {\n      ensureCroppie().then(() => setIsCroppieReady(true));\n\n      return;\n    }\n\n    initCropper(file);\n  }, [file, isCroppieReady]);\n\n  const lang = useOldLang();\n\n  const handleCropClick = useCallback(async () => {\n    if (!cropper) {\n      return;\n    }\n\n    const result: Blob | string = await cropper.result(cropperResultOptions);\n    const croppedImg = typeof result === 'string' ? result : blobToFile(result, 'avatar.jpg');\n\n    onChange(croppedImg);\n  }, [onChange]);\n\n  return (\n    <Modal\n      isOpen={Boolean(file)}\n      onClose={onClose}\n      title=\"Drag to reposition\"\n      className=\"CropModal\"\n      hasCloseButton\n    >\n      {isCroppieReady ? (\n        <div id=\"avatar-crop\" />\n      ) : (\n        <Loading />\n      )}\n      <Button\n        className=\"confirm-button\"\n        round\n        color=\"primary\"\n        onClick={handleCropClick}\n        ariaLabel={lang('CropImage')}\n      >\n        <Icon name=\"check\" />\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(CropModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"kWQHzIMD\",\"isDragging\":\"k0c5WDAy\",\"knob\":\"UpzQzcvs\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\n\nimport styles from './Draggable.module.scss';\n\ntype TPoint = {\n  x: number;\n  y: number;\n};\n\ntype DraggableState = {\n  isDragging: boolean;\n  origin: TPoint;\n  translation: TPoint;\n  width?: number;\n  height?: number;\n};\n\ntype OwnProps = {\n  children: React.ReactNode;\n  onDrag: (translation: TPoint, id: number | string) => void;\n  onDragEnd: NoneToVoidFunction;\n  id: number | string;\n  style?: string;\n  knobStyle?: string;\n  isDisabled?: boolean;\n};\n\nconst ZERO_POINT: TPoint = { x: 0, y: 0 };\n\nconst Draggable: FC<OwnProps> = ({\n  children,\n  id,\n  onDrag,\n  onDragEnd,\n  style: externalStyle,\n  knobStyle,\n  isDisabled,\n}) => {\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [state, setState] = useState<DraggableState>({\n    isDragging: false,\n    origin: ZERO_POINT,\n    translation: ZERO_POINT,\n  });\n\n  const handleMouseDown = (e: React.MouseEvent | React.TouchEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    const { x, y } = getClientCoordinate(e);\n\n    setState({\n      ...state,\n      isDragging: true,\n      origin: { x, y },\n      width: ref.current?.offsetWidth,\n      height: ref.current?.offsetHeight,\n    });\n  };\n\n  const handleMouseMove = useCallback((e: MouseEvent | TouchEvent) => {\n    const { x, y } = getClientCoordinate(e);\n\n    const translation = {\n      x: x - state.origin.x,\n      y: y - state.origin.y,\n    };\n\n    setState((current) => ({\n      ...current,\n      translation,\n    }));\n\n    onDrag(translation, id);\n  }, [id, onDrag, state.origin.x, state.origin.y]);\n\n  const handleMouseUp = useCallback(() => {\n    setState((current) => ({\n      ...current,\n      isDragging: false,\n      width: undefined,\n      height: undefined,\n    }));\n\n    onDragEnd();\n  }, [onDragEnd]);\n\n  useEffect(() => {\n    if (state.isDragging && isDisabled) {\n      setState((current) => ({\n        ...current,\n        isDragging: false,\n        width: undefined,\n        height: undefined,\n      }));\n    }\n  }, [isDisabled, state.isDragging]);\n\n  useEffect(() => {\n    if (state.isDragging) {\n      window.addEventListener('touchmove', handleMouseMove);\n      window.addEventListener('mousemove', handleMouseMove);\n      window.addEventListener('touchend', handleMouseUp);\n      window.addEventListener('touchcancel', handleMouseUp);\n      window.addEventListener('mouseup', handleMouseUp);\n    } else {\n      window.removeEventListener('touchmove', handleMouseMove);\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('touchend', handleMouseUp);\n      window.removeEventListener('touchcancel', handleMouseUp);\n      window.removeEventListener('mouseup', handleMouseUp);\n\n      setState((current) => ({\n        ...current,\n        translation: ZERO_POINT,\n      }));\n    }\n\n    return () => {\n      if (state.isDragging) {\n        window.removeEventListener('touchmove', handleMouseMove);\n        window.removeEventListener('mousemove', handleMouseMove);\n        window.removeEventListener('touchend', handleMouseUp);\n        window.removeEventListener('touchcancel', handleMouseUp);\n        window.removeEventListener('mouseup', handleMouseUp);\n      }\n    };\n  }, [handleMouseMove, handleMouseUp, state.isDragging]);\n\n  const fullClassName = buildClassName(styles.container, state.isDragging && styles.isDragging);\n\n  const cssStyles = useMemo(() => {\n    return buildStyle(\n      state.isDragging && `transform: translate(${state.translation.x}px, ${state.translation.y}px)`,\n      state.width ? `width: ${state.width}px` : undefined,\n      state.height ? `height: ${state.height}px` : undefined,\n      externalStyle,\n    );\n  }, [externalStyle, state.height, state.isDragging, state.translation.x, state.translation.y, state.width]);\n\n  return (\n    <div style={cssStyles} className={fullClassName} ref={ref}>\n      {children}\n\n      {!isDisabled && (\n        <div\n          aria-label={lang('i18n_dragToSort')}\n          tabIndex={0}\n          role=\"button\"\n          className={buildClassName(styles.knob, 'div-button', 'draggable-knob')}\n          onMouseDown={handleMouseDown}\n          onTouchStart={handleMouseDown}\n          style={knobStyle}\n        >\n          <Icon name=\"sort\" />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Draggable);\n\nfunction getClientCoordinate(e: MouseEvent | TouchEvent | React.MouseEvent | React.TouchEvent) {\n  let x;\n  let y;\n\n  if ('touches' in e) {\n    x = e.touches[0].clientX;\n    y = e.touches[0].clientY;\n  } else {\n    x = e.clientX;\n    y = e.clientY;\n  }\n\n  return { x, y };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps as ButtonProps } from './Button';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from './Button';\n\nimport './FloatingActionButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  className?: string;\n  color?: ButtonProps['color'];\n  ariaLabel?: ButtonProps['ariaLabel'];\n  disabled?: boolean;\n  onClick: () => void;\n  children: React.ReactNode;\n};\n\nconst FloatingActionButton: FC<OwnProps> = ({\n  isShown,\n  className,\n  color = 'primary',\n  ariaLabel,\n  disabled,\n  onClick,\n  children,\n}) => {\n  const lang = useOldLang();\n\n  const buttonClassName = buildClassName(\n    'FloatingActionButton',\n    isShown && 'revealed',\n    className,\n  );\n\n  return (\n    <Button\n      className={buttonClassName}\n      color={color}\n      round\n      disabled={disabled}\n      onClick={isShown && !disabled ? onClick : undefined}\n      ariaLabel={ariaLabel}\n      tabIndex={-1}\n      isRtl={lang.isRtl}\n    >\n      {children}\n    </Button>\n  );\n};\n\nexport default FloatingActionButton;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"eldglPwL\",\"svg\":\"xhUfxjkV\",\"circle\":\"hsaty2zA\"};","import React, { memo, useEffect, useState } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatCountdownShort } from '../../util/dates/dateFormat';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AnimatedCounter from '../common/AnimatedCounter';\n\nimport styles from './RoundTimer.module.scss';\n\ntype OwnProps = {\n  duration: number;\n  className?: string;\n  onEnd?: NoneToVoidFunction;\n};\n\nconst UPDATE_FREQUENCY = 1000;\nconst TIMER_RADIUS = 14;\n\nconst RoundTimer = ({ duration, className, onEnd }: OwnProps) => {\n  const [timeLeft, setTimeLeft] = useState(duration);\n  const lang = useOldLang();\n\n  useInterval(\n    () => setTimeLeft((prev) => prev - 1),\n    timeLeft > 0 ? UPDATE_FREQUENCY : undefined,\n  );\n\n  useEffect(() => {\n    if (timeLeft <= 0) {\n      onEnd?.();\n    }\n  }, [timeLeft, onEnd]);\n\n  useEffect(() => {\n    setTimeLeft(duration);\n  }, [duration]);\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      <svg className={styles.svg} width=\"32px\" height=\"32px\">\n        <circle\n          cx=\"16\"\n          cy=\"16\"\n          r={TIMER_RADIUS}\n          transform=\"rotate(-90, 16, 16)\"\n          pathLength=\"100\"\n          stroke-dasharray=\"100\"\n          stroke-dashoffset={100 - ((timeLeft - 1) / duration) * 100} // Show it one step further due to animation\n          className={styles.circle}\n        />\n      </svg>\n      <AnimatedCounter className={styles.text} text={formatCountdownShort(lang, timeLeft * 1000)} />\n    </div>\n  );\n};\n\nexport default memo(RoundTimer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiNotification } from '../../api/types';\nimport { isLangFnParam } from '../../util/localization/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport CustomEmoji from '../common/CustomEmoji';\nimport Icon from '../common/icons/Icon';\nimport Button from './Button';\nimport Portal from './Portal';\nimport RoundTimer from './RoundTimer';\n\nimport './Notification.scss';\n\ntype OwnProps = {\n  notification: ApiNotification;\n};\n\nconst DEFAULT_DURATION = 3000;\nconst ANIMATION_DURATION = 150;\nconst CUSTOM_EMOJI_SIZE = 1.75 * REM;\n\nconst Notification: FC<OwnProps> = ({\n  notification,\n}) => {\n  const actions = getActions();\n\n  const lang = useLang();\n\n  const {\n    localId,\n    message,\n    action,\n    actionText,\n    cacheBreaker,\n    className,\n    disableClickDismiss,\n    dismissAction,\n    duration = DEFAULT_DURATION,\n    icon,\n    customEmojiIconId,\n    shouldShowTimer,\n    title,\n    containerSelector,\n  } = notification;\n\n  const [isOpen, setIsOpen] = useState(true);\n  // eslint-disable-next-line no-null/no-null\n  const timerRef = useRef<number | undefined>(null);\n  const { transitionClassNames } = useShowTransitionDeprecated(isOpen);\n\n  const handleDismiss = useLastCallback(() => {\n    actions.dismissNotification({ localId });\n  });\n\n  const closeAndDismiss = useLastCallback((force?: boolean) => {\n    if (!force && disableClickDismiss) return;\n    setIsOpen(false);\n    setTimeout(handleDismiss, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    if (dismissAction) {\n      // @ts-ignore\n      actions[dismissAction.action](dismissAction.payload);\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (action) {\n      if (Array.isArray(action)) {\n        // @ts-ignore\n        action.forEach((cb) => actions[cb.action](cb.payload));\n      } else {\n        // @ts-ignore\n        actions[action.action](action.payload);\n      }\n    }\n    closeAndDismiss();\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(closeAndDismiss) : undefined), [isOpen, closeAndDismiss]);\n\n  useEffect(() => {\n    timerRef.current = window.setTimeout(() => closeAndDismiss(true), duration);\n\n    return () => {\n      if (timerRef.current) {\n        clearTimeout(timerRef.current);\n        timerRef.current = undefined;\n      }\n    };\n  }, [duration, cacheBreaker]); // Reset timer if `cacheBreaker` changes\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (disableClickDismiss) return;\n    if (timerRef.current) {\n      clearTimeout(timerRef.current);\n      timerRef.current = undefined;\n    }\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    if (disableClickDismiss) return;\n    if (timerRef.current) {\n      clearTimeout(timerRef.current);\n    }\n    timerRef.current = window.setTimeout(closeAndDismiss, duration);\n  });\n\n  const renderedTitle = useMemo(() => {\n    if (!title) return undefined;\n    if (isLangFnParam(title)) {\n      return lang.with(title);\n    }\n\n    return renderText(title, ['simple_markdown', 'emoji', 'br', 'links']);\n  }, [lang, title]);\n\n  const renderedMessage = useMemo(() => {\n    if (isLangFnParam(message)) {\n      return lang.with(message);\n    }\n\n    if (typeof message === 'string') {\n      return renderText(message, ['simple_markdown', 'emoji', 'br', 'links']);\n    }\n\n    return message;\n  }, [lang, message]);\n\n  const renderedActionText = useMemo(() => {\n    if (!actionText) return undefined;\n    if (isLangFnParam(actionText)) {\n      return lang.with(actionText);\n    }\n\n    return actionText;\n  }, [lang, actionText]);\n\n  return (\n    <Portal className=\"Notification-container\" containerSelector={containerSelector}>\n      <div\n        className={buildClassName('Notification', transitionClassNames, className)}\n        onClick={handleClick}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n      >\n        {customEmojiIconId ? (\n          <CustomEmoji\n            className=\"notification-emoji-icon\"\n            forceAlways\n            size={CUSTOM_EMOJI_SIZE}\n            documentId={customEmojiIconId}\n          />\n        ) : (\n          <Icon name={icon || 'info-filled'} className=\"notification-icon\" />\n        )}\n        <div className=\"content\">\n          {renderedTitle && (\n            <div className=\"notification-title\">{renderedTitle}</div>\n          )}\n          {renderedMessage}\n        </div>\n        {action && renderedActionText && (\n          <Button\n            color=\"translucent-white\"\n            onClick={handleClick}\n            className=\"notification-button\"\n          >\n            {renderedActionText}\n          </Button>\n        )}\n        {shouldShowTimer && (\n          <RoundTimer className=\"notification-timer\" key={cacheBreaker} duration={Math.ceil(duration / 1000)} />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default Notification;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\n\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { animate, timingFunctions } from '../../util/animation';\nimport buildClassName from '../../util/buildClassName';\n\nimport useDynamicColorListener from '../../hooks/stickers/useDynamicColorListener';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useDevicePixelRatio from '../../hooks/window/useDevicePixelRatio';\n\nimport Icon from '../common/icons/Icon';\n\nimport './ProgressSpinner.scss';\n\nconst SIZES = {\n  s: 42, m: 48, l: 54, xl: 52,\n};\nconst STROKE_WIDTH = 2;\nconst STROKE_WIDTH_XL = 3;\nconst PADDING = 2;\nconst MIN_PROGRESS = 0.05;\nconst MAX_PROGRESS = 1;\nconst GROW_DURATION = 600; // 0.6 s\nconst ROTATE_DURATION = 2000; // 2 s\n\nconst ProgressSpinner: FC<{\n  progress?: number;\n  size?: 's' | 'm' | 'l' | 'xl';\n  square?: boolean;\n  transparent?: boolean;\n  noCross?: boolean;\n  rotationOffset?: number;\n  withColor?: boolean;\n  onClick?: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n}> = ({\n  progress = 0,\n  size = 'l',\n  square,\n  transparent,\n  noCross,\n  rotationOffset,\n  withColor,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const width = SIZES[size];\n  const progressRef = useStateRef(progress);\n\n  const dpr = useDevicePixelRatio();\n\n  const color = useDynamicColorListener(canvasRef, !withColor);\n\n  useEffect(() => {\n    let isFirst = true;\n    let growFrom = MIN_PROGRESS;\n    let growStartedAt: number | undefined;\n    let prevProgress: number | undefined;\n\n    animate(() => {\n      if (!canvasRef.current) {\n        return false;\n      }\n\n      if (progressRef.current !== prevProgress) {\n        growFrom = Math.min(Math.max(MIN_PROGRESS, prevProgress || 0), MAX_PROGRESS);\n        growStartedAt = Date.now();\n        prevProgress = progressRef.current;\n      }\n\n      const targetProgress = Math.min(Math.max(MIN_PROGRESS, progressRef.current), MAX_PROGRESS);\n      const t = Math.min(1, (Date.now() - growStartedAt!) / GROW_DURATION);\n      const animationFactor = timingFunctions.easeOutQuad(t);\n      const currentProgress = growFrom + (targetProgress - growFrom) * animationFactor;\n\n      drawSpinnerArc(\n        canvasRef.current,\n        width * dpr,\n        (size === 'xl' ? STROKE_WIDTH_XL : STROKE_WIDTH) * dpr,\n        color ?? 'white',\n        currentProgress,\n        dpr,\n        isFirst,\n        rotationOffset,\n      );\n\n      isFirst = false;\n\n      return currentProgress < 1;\n    }, requestMutation);\n  }, [progressRef, size, width, dpr, rotationOffset, color]);\n\n  const className = buildClassName(\n    `ProgressSpinner size-${size}`,\n    transparent && 'transparent',\n    square && 'square',\n    noCross && 'no-cross',\n  );\n\n  return (\n    <div\n      className={className}\n      onClick={onClick}\n    >\n      {!noCross && <Icon name=\"close\" />}\n      <canvas ref={canvasRef} className=\"ProgressSpinner_canvas\" style={`width: ${width}; height: ${width}px;`} />\n    </div>\n  );\n};\n\nfunction drawSpinnerArc(\n  canvas: HTMLCanvasElement,\n  size: number,\n  strokeWidth: number,\n  color: string,\n  progress: number,\n  dpr: number,\n  shouldInit = false,\n  rotationOffset?: number,\n) {\n  const centerCoordinate = size / 2;\n  const radius = (size - strokeWidth) / 2 - PADDING * dpr;\n  const offset = rotationOffset ?? (Date.now() % ROTATE_DURATION) / ROTATE_DURATION;\n  const startAngle = (2 * Math.PI) * offset;\n  const endAngle = startAngle + (2 * Math.PI) * progress;\n  const ctx = canvas.getContext('2d')!;\n\n  if (shouldInit) {\n    canvas.width = size;\n    canvas.height = size;\n\n    ctx.lineCap = 'round';\n    ctx.strokeStyle = color;\n    ctx.lineWidth = strokeWidth;\n  }\n\n  ctx.clearRect(0, 0, size, size);\n  ctx.beginPath();\n  ctx.arc(centerCoordinate, centerCoordinate, radius, startAngle, endAngle);\n  ctx.stroke();\n}\n\nexport default memo(ProgressSpinner);\n","import type { ChangeEvent, MouseEventHandler } from 'react';\nimport type { FC, TeactNode } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Spinner from './Spinner';\n\nimport './Radio.scss';\n\ntype OwnProps = {\n  id?: string;\n  name?: string;\n  label?: TeactNode;\n  subLabel?: TeactNode;\n  value?: string;\n  checked?: boolean;\n  disabled?: boolean;\n  isLink?: boolean;\n  hidden?: boolean;\n  isLoading?: boolean;\n  withIcon?: boolean;\n  className?: string;\n  onlyInput?: boolean;\n  subLabelClassName?: string;\n  onChange?: (e: ChangeEvent<HTMLInputElement>) => void;\n  onSubLabelClick?: MouseEventHandler<HTMLSpanElement> | undefined;\n};\n\nconst Radio: FC<OwnProps> = ({\n  id,\n  label,\n  subLabel,\n  subLabelClassName,\n  value,\n  name,\n  checked,\n  disabled,\n  hidden,\n  isLoading,\n  className,\n  onlyInput,\n  withIcon,\n  isLink,\n  onChange,\n  onSubLabelClick,\n}) => {\n  const lang = useOldLang();\n  const fullClassName = buildClassName(\n    'Radio',\n    className,\n    disabled && 'disabled',\n    hidden && 'hidden-widget',\n    withIcon && 'with-icon',\n    isLoading && 'loading',\n    onlyInput && 'onlyInput',\n    Boolean(subLabel) && 'withSubLabel',\n  );\n\n  return (\n    <label className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <input\n        type=\"radio\"\n        name={name}\n        value={value}\n        id={id}\n        checked={checked}\n        onChange={onChange}\n        disabled={disabled || hidden}\n      />\n      <div className=\"Radio-main\">\n        <span className=\"label\" dir={lang.isRtl ? 'auto' : undefined}>{label}</span>\n        {subLabel\n          && (\n            <span\n              className={buildClassName(subLabelClassName, 'subLabel', isLink ? 'subLabelLink' : undefined)}\n              dir={lang.isRtl ? 'auto' : undefined}\n              onClick={isLink ? onSubLabelClick : undefined}\n            >\n              {subLabel}\n            </span>\n          )}\n      </div>\n      {isLoading && <Spinner />}\n    </label>\n  );\n};\n\nexport default memo(Radio);\n","import type { ChangeEvent } from 'react';\nimport type { FC, TeactNode } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Radio from './Radio';\n\nexport type IRadioOption<T = string> = {\n  label: TeactNode;\n  subLabel?: TeactNode;\n  value: T;\n  hidden?: boolean;\n  className?: string;\n};\n\ntype OwnProps = {\n  id?: string;\n  name: string;\n  options: IRadioOption[];\n  selected?: string;\n  disabled?: boolean;\n  loadingOption?: string;\n  onChange: (value: string, event: ChangeEvent<HTMLInputElement>) => void;\n  onClickAction?: (value: string) => void;\n  isLink?: boolean;\n  withIcon?: boolean;\n  subLabelClassName?: string;\n  subLabel?: TeactNode;\n};\n\nconst RadioGroup: FC<OwnProps> = ({\n  id,\n  name,\n  options,\n  selected,\n  disabled,\n  loadingOption,\n  onChange,\n  onClickAction,\n  subLabelClassName,\n  isLink,\n  withIcon,\n  subLabel,\n}) => {\n  const handleChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.currentTarget;\n    onChange(value, event);\n  }, [onChange]);\n\n  const onSubLabelClick = useLastCallback((value: string) => () => {\n    onClickAction?.(value);\n  });\n\n  return (\n    <div id={id} className=\"radio-group\">\n      {options.map((option) => (\n        <Radio\n          name={name}\n          label={option.label}\n          subLabel={subLabel || option.subLabel}\n          subLabelClassName={subLabelClassName}\n          value={option.value}\n          checked={option.value === selected}\n          hidden={option.hidden}\n          disabled={disabled}\n          withIcon={withIcon}\n          isLoading={loadingOption ? loadingOption === option.value : undefined}\n          className={option.className}\n          onChange={handleChange}\n          onSubLabelClick={onSubLabelClick(option.value)}\n          isLink={isLink}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(RadioGroup);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport './RangeSlider.scss';\n\ntype OwnProps = {\n  options?: string[];\n  min?: number;\n  max?: number;\n  step?: number;\n  label?: string;\n  value: number;\n  disabled?: boolean;\n  bold?: boolean;\n  className?: string;\n  renderValue?: (value: number) => string;\n  onChange: (value: number) => void;\n  isCenteredLayout?: boolean;\n};\n\nconst RangeSlider: FC<OwnProps> = ({\n  options,\n  min = 0,\n  max = options ? options.length - 1 : 100,\n  step = 1,\n  label,\n  value,\n  disabled,\n  bold,\n  className,\n  renderValue,\n  onChange,\n  isCenteredLayout,\n}) => {\n  const lang = useOldLang();\n  const handleChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    onChange(Number(event.currentTarget.value));\n  }, [onChange]);\n\n  const mainClassName = buildClassName(\n    className,\n    'RangeSlider',\n    disabled && 'disabled',\n    bold && 'bold',\n  );\n\n  const trackWidth = useMemo(() => {\n    if (options) {\n      return (value / (options.length - 1)) * 100;\n    } else {\n      const possibleValuesLength = (max - min) / step;\n      return ((value - min) / possibleValuesLength) * 100;\n    }\n  }, [options, value, max, min, step]);\n\n  function renderTopRow() {\n    if (isCenteredLayout) {\n      return (\n        <div className=\"slider-top-row\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {!options && (\n            <>\n              <span className=\"value-min\" dir=\"auto\">{min}</span>\n              <span className=\"label\" dir=\"auto\">{renderValue ? renderValue(value) : value}</span>\n              <span className=\"value-max\" dir=\"auto\">{max}</span>\n            </>\n          )}\n        </div>\n      );\n    }\n\n    if (!label) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"slider-top-row\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"label\" dir=\"auto\">{label}</span>\n        {!options && (\n          <span className=\"value\" dir=\"auto\">{renderValue ? renderValue(value) : value}</span>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={mainClassName}>\n      {renderTopRow()}\n      <div className=\"slider-main\">\n        <div\n          className=\"slider-fill-track\"\n          style={`width: ${trackWidth}%`}\n        />\n        <input\n          min={min}\n          max={max}\n          value={value}\n          step={step}\n          type=\"range\"\n          className=\"RangeSlider__input\"\n          onChange={handleChange}\n        />\n        {options && (\n          <div className=\"slider-options\">\n            {options.map((option, index) => (\n              <div\n                className={buildClassName('slider-option', index === value && 'active')}\n                onClick={() => onChange(index)}\n              >\n                {option}\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(RangeSlider);\n","// extracted by mini-css-extract-plugin\nexport default {\"dotWrapper\":\"s8NMMSES\",\"sliderContainer\":\"i_wrxmyh\",\"marksContainer\":\"bVlnaLCI\",\"mark\":\"AFFaq4eZ\",\"active\":\"cuogxYPG\",\"slider\":\"H_rMZrqn\",\"tickMarks\":\"O7SI4r_Y\",\"tick\":\"b6UDc3zh\",\"filled\":\"VELPJsJ0\",\"tickUnfilled\":\"K8NtimIi\"};","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useLayoutEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './RangeSliderWithMarks.module.scss';\n\nexport type OwnProps = {\n  marks: number[];\n  onChange: (value: number) => void;\n  rangeCount: number;\n};\n\nconst RangeSliderWithMarks: FC<OwnProps> = ({ marks, onChange, rangeCount }) => {\n  // eslint-disable-next-line no-null/no-null\n  const sliderRef = useRef<HTMLInputElement | null>(null);\n\n  const fillPercentage = useMemo(() => {\n    return ((marks.indexOf(rangeCount) / (marks.length - 1)) * 100).toFixed(2);\n  }, [marks, rangeCount]);\n\n  const rangeCountIndex = useMemo(() => marks.indexOf(rangeCount), [marks, rangeCount]);\n\n  const rangeValue = useMemo(() => {\n    return marks.indexOf(rangeCount).toString();\n  }, [marks, rangeCount]);\n\n  useLayoutEffect(() => {\n    sliderRef.current!.style.setProperty('--fill-percentage', `${fillPercentage}%`);\n  }, [fillPercentage]);\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const index = parseInt(event.target.value, 10);\n    const newValue = marks[index];\n    onChange(newValue);\n  };\n\n  return (\n    <div className={styles.dotWrapper}>\n      <form>\n        <div className={styles.sliderContainer}>\n          <div className={styles.tickMarks}>\n            {marks.map((mark, index) => {\n              const isFilled = index <= rangeCountIndex;\n              return (\n                <div\n                  key={mark}\n                  className={buildClassName(\n                    styles.tick,\n                    isFilled ? styles.filled : styles.tickUnfilled,\n                  )}\n                />\n              );\n            })}\n          </div>\n          <div className={styles.marksContainer}>\n            {marks.map((mark) => (\n              <div\n                key={mark}\n                className={buildClassName(styles.mark, rangeCount === mark && styles.active)}\n              >\n                {mark}\n              </div>\n            ))}\n          </div>\n          <input\n            ref={sliderRef}\n            type=\"range\"\n            className={styles.slider}\n            min=\"0\"\n            max={marks.length - 1}\n            value={rangeValue}\n            onChange={handleChange}\n            step=\"1\"\n          />\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(RangeSliderWithMarks);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef } from '../../lib/teact/teact';\n\nimport type { OwnProps as ButtonProps } from './Button';\n\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from './Button';\n\ntype OwnProps = {\n  onActivate: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate(e);\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate(e);\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    isMouseInside.current = true;\n    onActivate(e);\n  });\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={!IS_TOUCH_ENV ? onActivate : handleClick}\n    />\n  );\n};\n\nexport default ResponsiveHoverButton;\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport useInputFocusOnOpen from '../../hooks/useInputFocusOnOpen';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from './Button';\nimport Loading from './Loading';\nimport Transition from './Transition';\n\nimport './SearchInput.scss';\n\ntype OwnProps = {\n  ref?: RefObject<HTMLInputElement>;\n  children?: React.ReactNode;\n  resultsItemSelector?: string;\n  className?: string;\n  inputId?: string;\n  value?: string;\n  focused?: boolean;\n  isLoading?: boolean;\n  spinnerColor?: 'yellow';\n  spinnerBackgroundColor?: 'light';\n  placeholder?: string;\n  disabled?: boolean;\n  autoComplete?: string;\n  canClose?: boolean;\n  autoFocusSearch?: boolean;\n  hasUpButton?: boolean;\n  hasDownButton?: boolean;\n  teactExperimentControlled?: boolean;\n  withBackIcon?: boolean;\n  onChange: (value: string) => void;\n  onStartBackspace?: NoneToVoidFunction;\n  onReset?: NoneToVoidFunction;\n  onFocus?: NoneToVoidFunction;\n  onBlur?: NoneToVoidFunction;\n  onClick?: NoneToVoidFunction;\n  onUpClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  onDownClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  onSpinnerClick?: NoneToVoidFunction;\n};\n\nconst SearchInput: FC<OwnProps> = ({\n  ref,\n  children,\n  resultsItemSelector,\n  value,\n  inputId,\n  className,\n  focused,\n  isLoading = false,\n  spinnerColor,\n  spinnerBackgroundColor,\n  placeholder,\n  disabled,\n  autoComplete,\n  canClose,\n  autoFocusSearch,\n  hasUpButton,\n  hasDownButton,\n  teactExperimentControlled,\n  withBackIcon,\n  onChange,\n  onStartBackspace,\n  onReset,\n  onFocus,\n  onBlur,\n  onClick,\n  onUpClick,\n  onDownClick,\n  onSpinnerClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  let inputRef = useRef<HTMLInputElement>(null);\n  if (ref) {\n    inputRef = ref;\n  }\n\n  const [isInputFocused, markInputFocused, unmarkInputFocused] = useFlag(focused);\n\n  useInputFocusOnOpen(inputRef, autoFocusSearch, unmarkInputFocused);\n\n  useEffect(() => {\n    if (!inputRef.current) {\n      return;\n    }\n\n    if (focused) {\n      inputRef.current.focus();\n    } else {\n      inputRef.current.blur();\n    }\n  }, [focused, placeholder]); // Trick for setting focus when selecting a contact to search for\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const { currentTarget } = event;\n    onChange(currentTarget.value);\n\n    if (!isInputFocused) {\n      handleFocus();\n    }\n  }\n\n  function handleFocus() {\n    markInputFocused();\n    onFocus?.();\n  }\n\n  function handleBlur() {\n    unmarkInputFocused();\n    onBlur?.();\n  }\n\n  const handleKeyDown = useLastCallback((e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (!resultsItemSelector) return;\n    if (e.key === 'ArrowDown' || e.key === 'Enter') {\n      const element = document.querySelector(resultsItemSelector) as HTMLElement;\n      if (element) {\n        element.focus();\n      }\n    }\n\n    if (e.key === 'Backspace' && e.currentTarget.selectionStart === 0 && e.currentTarget.selectionEnd === 0) {\n      onStartBackspace?.();\n    }\n  });\n\n  return (\n    <div\n      className={buildClassName('SearchInput', className, isInputFocused && 'has-focus')}\n      onClick={onClick}\n      dir={oldLang.isRtl ? 'rtl' : undefined}\n    >\n      <Transition\n        name=\"fade\"\n        shouldCleanup\n        activeKey={Number(!isLoading && !withBackIcon)}\n        className=\"icon-container-left\"\n        slideClassName=\"icon-container-slide\"\n      >\n        {isLoading && !withBackIcon ? (\n          <Loading color={spinnerColor} backgroundColor={spinnerBackgroundColor} onClick={onSpinnerClick} />\n        ) : withBackIcon ? (\n          <Icon name=\"arrow-left\" className=\"back-icon\" onClick={onReset} />\n        ) : (\n          <Icon name=\"search\" className=\"search-icon\" />\n        )}\n      </Transition>\n      <div>{children}</div>\n      <input\n        ref={inputRef}\n        id={inputId}\n        type=\"text\"\n        dir=\"auto\"\n        placeholder={placeholder || oldLang('Search')}\n        className=\"form-control\"\n        value={value}\n        disabled={disabled}\n        autoComplete={autoComplete}\n        onChange={handleChange}\n        onFocus={handleFocus}\n        onBlur={handleBlur}\n        onKeyDown={handleKeyDown}\n        teactExperimentControlled={teactExperimentControlled}\n      />\n      {hasUpButton && (\n        <Button\n          round\n          size=\"tiny\"\n          color=\"translucent\"\n          onClick={onUpClick}\n          disabled={!onUpClick}\n          ariaLabel={lang('AriaSearchOlderResult')}\n        >\n          <Icon name=\"up\" />\n        </Button>\n      )}\n      {hasDownButton && (\n        <Button\n          round\n          size=\"tiny\"\n          color=\"translucent\"\n          onClick={onDownClick}\n          disabled={!onDownClick}\n          ariaLabel={lang('AriaSearchNewerResult')}\n        >\n          <Icon name=\"down\" />\n        </Button>\n      )}\n      <Transition\n        name=\"fade\"\n        shouldCleanup\n        activeKey={Number(isLoading)}\n        className=\"icon-container-right\"\n        slideClassName=\"icon-container-slide\"\n      >\n        {withBackIcon && isLoading ? (\n          <Loading color={spinnerColor} backgroundColor={spinnerBackgroundColor} onClick={onSpinnerClick} />\n        ) : (\n          (value || canClose) && onReset && (\n            <Button\n              round\n              size=\"tiny\"\n              color=\"translucent\"\n              onClick={onReset}\n            >\n              <Icon name=\"close\" />\n            </Button>\n          )\n        )}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(SearchInput);\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  id?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  ref?: RefObject<HTMLSelectElement>;\n  hasArrow?: boolean;\n  tabIndex?: number;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>) => void;\n  children: React.ReactNode;\n};\n\nconst Select: FC<OwnProps> = (props) => {\n  const {\n    id,\n    value,\n    label,\n    hasArrow,\n    error,\n    ref,\n    tabIndex,\n    onChange,\n    children,\n  } = props;\n  const labelText = error || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error && 'error',\n    labelText && 'with-label',\n    hasArrow && 'with-arrow',\n    'input-group',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <select\n        className=\"form-control\"\n        id={id}\n        value={value || ''}\n        onChange={onChange}\n        tabIndex={tabIndex}\n        ref={ref}\n      >\n        {children}\n      </select>\n      {labelText && id && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Select);\n","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"axfkbhWJ\"};","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\n\nimport { openSystemFilesDialog } from '../../util/systemFilesDialog';\n\nimport CropModal from './CropModal';\n\nimport styles from './SelectAvatar.module.scss';\n\ntype OwnProps = {\n  onChange: (file: File) => void;\n  inputRef: RefObject<HTMLInputElement>;\n};\n\nconst SelectAvatar: FC<OwnProps> = ({\n  onChange,\n  inputRef,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n\n  const handleAvatarCrop = useCallback((croppedImg: File) => {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n  }, [onChange]);\n\n  const handleModalClose = useCallback(() => {\n    setSelectedFile(undefined);\n  }, []);\n\n  const handleClick = useCallback(() => {\n    openSystemFilesDialog('image/png, image/jpeg', ((event) => {\n      const target = event.target as HTMLInputElement;\n      if (!target?.files?.[0]) {\n        return;\n      }\n      setSelectedFile(target.files[0]);\n    }), true);\n  }, []);\n\n  return (\n    <>\n      <input ref={inputRef} className={styles.input} onClick={handleClick} />\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </>\n  );\n};\n\nexport default memo(SelectAvatar);\n","// extracted by mini-css-extract-plugin\nexport default {\"separator\":\"LxlpQKLr\"};","import React from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport styles from './Separator.module.scss';\n\ntype OwnProps = {\n  children?: React.ReactNode;\n  className?: string;\n};\n\nfunction Separator({ children, className }: OwnProps) {\n  const lang = useOldLang();\n\n  return (\n    <div\n      dir={lang.isRtl ? 'rtl' : undefined}\n      className={buildClassName(styles.separator, className)}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Separator;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from './Button';\n\nimport './ShowMoreButton.scss';\n\ntype OwnProps = {\n  count: number;\n  itemName: string;\n  itemPluralName?: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nconst ShowMoreButton: FC<OwnProps> = ({\n  count,\n  itemName,\n  itemPluralName,\n  isLoading,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <Button\n      className=\"ShowMoreButton\"\n      color=\"translucent\"\n      size=\"smaller\"\n      isText\n      isLoading={isLoading}\n      isRtl={lang.isRtl}\n      onClick={onClick}\n    >\n      <Icon name=\"down\" />\n      Show {count} more {count > 1 ? itemPluralName || `${itemName}s` : itemName}\n    </Button>\n  );\n};\n\nexport default ShowMoreButton;\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport './Switcher.scss';\n\ntype OwnProps = {\n  id?: string;\n  name?: string;\n  value?: string;\n  label: string;\n  checked?: boolean;\n  disabled?: boolean;\n  inactive?: boolean;\n  noAnimation?: boolean;\n  onChange?: (e: ChangeEvent<HTMLInputElement>) => void;\n  onCheck?: (isChecked: boolean) => void;\n};\n\nconst Switcher: FC<OwnProps> = ({\n  id,\n  name,\n  value,\n  label,\n  checked = false,\n  disabled,\n  inactive,\n  noAnimation,\n  onChange,\n  onCheck,\n}) => {\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (onChange) {\n      onChange(e);\n    }\n\n    if (onCheck) {\n      onCheck(e.currentTarget.checked);\n    }\n  }, [onChange, onCheck]);\n\n  const className = buildClassName(\n    'Switcher',\n    disabled && 'disabled',\n    inactive && 'inactive',\n    noAnimation && 'no-animation',\n  );\n\n  return (\n    <label className={className} title={label}>\n      <input\n        type=\"checkbox\"\n        id={id}\n        name={name}\n        value={value}\n        checked={checked}\n        disabled={disabled}\n        onChange={handleChange}\n      />\n      <span className=\"widget\" />\n    </label>\n  );\n};\n\nexport default memo(Switcher);\n","import type { ChangeEvent, FormEvent, RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\n\nimport { requestForcedReflow, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\ntype OwnProps = {\n  ref?: RefObject<HTMLTextAreaElement>;\n  id?: string;\n  className?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  success?: string;\n  disabled?: boolean;\n  readOnly?: boolean;\n  placeholder?: string;\n  autoComplete?: string;\n  maxLength?: number;\n  maxLengthIndicator?: string;\n  tabIndex?: number;\n  inputMode?: 'text' | 'none' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';\n  onChange?: (e: ChangeEvent<HTMLTextAreaElement>) => void;\n  onInput?: (e: FormEvent<HTMLTextAreaElement>) => void;\n  onKeyPress?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onKeyDown?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onBlur?: (e: React.FocusEvent<HTMLTextAreaElement>) => void;\n  onPaste?: (e: React.ClipboardEvent<HTMLTextAreaElement>) => void;\n  noReplaceNewlines?: boolean;\n};\n\nconst TextArea: FC<OwnProps> = ({\n  ref,\n  id,\n  className,\n  value,\n  label,\n  error,\n  success,\n  disabled,\n  readOnly,\n  placeholder,\n  autoComplete,\n  inputMode,\n  maxLength,\n  maxLengthIndicator,\n  tabIndex,\n  onChange,\n  onInput,\n  onKeyPress,\n  onKeyDown,\n  onBlur,\n  onPaste,\n  noReplaceNewlines,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  let textareaRef = useRef<HTMLTextAreaElement>(null);\n  if (ref) {\n    textareaRef = ref;\n  }\n\n  const lang = useOldLang();\n  const labelText = error || success || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error ? 'error' : success && 'success',\n    disabled && 'disabled',\n    readOnly && 'disabled',\n    labelText && 'with-label',\n    className,\n  );\n\n  const resizeHeight = useLastCallback((element: HTMLTextAreaElement) => {\n    requestMutation(() => {\n      element.style.height = '0';\n      requestForcedReflow(() => {\n        const newHeight = element.scrollHeight;\n        return () => {\n          element.style.height = `${newHeight}px`;\n        };\n      });\n    });\n  });\n\n  useLayoutEffect(() => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n    resizeHeight(textarea);\n  }, []);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    const target = e.currentTarget;\n    if (!noReplaceNewlines) {\n      const previousSelectionEnd = target.selectionEnd;\n      // TDesktop replaces newlines with spaces as well\n      target.value = target.value.replace(/\\n/g, ' ');\n      target.selectionEnd = previousSelectionEnd;\n    }\n    resizeHeight(target);\n    onChange?.(e);\n  }, [noReplaceNewlines, onChange]);\n\n  return (\n    <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <textarea\n        ref={textareaRef}\n        className=\"form-control\"\n        id={id}\n        dir=\"auto\"\n        value={value || ''}\n        tabIndex={tabIndex}\n        placeholder={placeholder}\n        maxLength={maxLength}\n        autoComplete={autoComplete}\n        inputMode={inputMode}\n        disabled={disabled}\n        readOnly={readOnly}\n        onChange={handleChange}\n        onInput={onInput}\n        onKeyPress={onKeyPress}\n        onKeyDown={onKeyDown}\n        onBlur={onBlur}\n        onPaste={onPaste}\n        aria-label={labelText}\n      />\n      {labelText && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n      {maxLengthIndicator && (\n        <div className=\"max-length-indicator\">{maxLengthIndicator}</div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(TextArea);\n","import React, { type FC, memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport { getServerTime } from '../../util/serverTime';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useOldLang from '../../hooks/useOldLang';\n\ntype OwnProps = {\n  langKey: string;\n  endsAt: number;\n  onEnd?: NoneToVoidFunction;\n};\n\nconst UPDATE_FREQUENCY = 500; // Sometimes second gets skipped if using 1000\n\nconst TextTimer: FC<OwnProps> = ({ langKey, endsAt, onEnd }) => {\n  const lang = useOldLang();\n  const forceUpdate = useForceUpdate();\n\n  const serverTime = getServerTime();\n  const isActive = serverTime < endsAt;\n  useInterval(forceUpdate, isActive ? UPDATE_FREQUENCY : undefined);\n\n  useEffect(() => {\n    if (!isActive) {\n      onEnd?.();\n    }\n  }, [isActive, onEnd]);\n\n  if (!isActive) return undefined;\n\n  const timeLeft = endsAt - serverTime;\n  const formattedTime = formatMediaDuration(timeLeft);\n\n  return (\n    <span>\n      {lang(langKey, formattedTime)}\n    </span>\n  );\n};\n\nexport default memo(TextTimer);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"eGD1rubd\",\"widget\":\"EXXsQxeq\",\"min\":\"C4vXj96y\",\"mid\":\"nRNm3LRD\",\"max\":\"LdztzMx0\",\"filler\":\"kudEBJOk\"};","import React, { memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './Toggle.module.scss';\n\ninterface OwnProps {\n  value: 'min' | 'mid' | 'max';\n}\n\nfunction Toggle({ value }: OwnProps) {\n  return (\n    <div className={buildClassName(styles.root, 'Toggle')} aria-hidden>\n      <i className={buildClassName(styles.filler, styles[value])} />\n      <i className={buildClassName(styles.widget, styles[value])} />\n    </div>\n  );\n}\n\nexport default memo(Toggle);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Oob7moh7\",\"avatar\":\"ao0o6F_1\",\"info\":\"e94nYlC4\",\"title\":\"ANs9RCJu\",\"subtitle\":\"RSn3O5Rx\",\"animated\":\"AtWkrIxV\",\"slide\":\"_iiRl0o2\"};","import React, { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport styles from './PlaceholderChatInfo.module.scss';\n\nconst PlaceholderChatInfo = () => {\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.avatar, styles.animated)} />\n      <div className={styles.info}>\n        <div className={buildClassName(styles.title, styles.animated)} />\n        <div className={buildClassName(styles.subtitle, styles.animated)} />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PlaceholderChatInfo);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\n\nimport './Skeleton.scss';\n\ntype OwnProps = {\n  variant?: 'rectangular' | 'rounded-rect' | 'round';\n  animation?: 'wave' | 'pulse';\n  width?: number;\n  height?: number;\n  forceAspectRatio?: boolean;\n  inline?: boolean;\n  className?: string;\n};\n\nconst Skeleton: FC<OwnProps> = ({\n  variant = 'rectangular',\n  animation = 'wave',\n  width,\n  height,\n  forceAspectRatio,\n  inline,\n  className,\n}) => {\n  const classNames = buildClassName('Skeleton', variant, animation, className, inline && 'inline');\n  const aspectRatio = (width && height) ? `aspect-ratio: ${width}/${height}` : undefined;\n  const style = buildStyle(\n    forceAspectRatio && aspectRatio,\n    Boolean(width) && `width: ${width}px`,\n    !forceAspectRatio && Boolean(height) && `height: ${height}px`,\n  );\n  return (\n    <div className={classNames} style={style}>{inline && '\\u00A0'}</div>\n  );\n};\n\nexport default Skeleton;\n"],"names":["memo","AvatarEditable","title","disabled","isForForum","currentAvatarBlobUrl","onChange","selectedFile","setSelectedFile","useState","croppedBlobUrl","setCroppedBlobUrl","useEffect","handleAvatarCrop","useCallback","croppedImg","undefined","URL","revokeObjectURL","createObjectURL","handleModalClose","labelClassName","buildClassName","React","createElement","className","role","tabIndex","type","event","target","files","value","accept","Icon","name","src","draggable","alt","CropModal","file","onClose","CheckboxGroup","id","options","selected","nestedCheckbox","loadingOptions","isRound","values","setValues","handleChange","useLastCallback","nestedOptionList","checked","currentTarget","newValues","push","nestedOptions","forEach","nestedOption","includes","filter","v","map","some","nestedValue","getCheckedNestedCount","checkedCount","length","option","Checkbox","label","subLabel","indexOf","isLoading","nestedCheckboxCount","ConfirmDialog","isOpen","noDefaultTitle","header","text","textParts","confirmLabel","confirmIsDestructive","isConfirmDisabled","isOnlyConfirm","areButtonsInColumn","children","confirmHandler","onCloseAnimationEnd","lang","useOldLang","containerRef","useRef","handleSelectWithEnter","index","handleKeyDown","useKeyboardListNavigation","Modal","split","textPart","ref","onKeyDown","Button","isText","onClick","color","cropperResultOptions","quality","format","circle","size","width","height","Croppie","croppiePromise","cropper","isCroppieReady","setIsCroppieReady","async","imgFile","cropContainer","document","getElementById","offsetWidth","offsetHeight","enableZoom","boundary","viewport","dataUri","blobToDataUri","bind","url","err","DEBUG","console","error","initCropper","default","ensureCroppie","then","handleCropClick","result","blobToFile","Boolean","hasCloseButton","Loading","round","ariaLabel","ZERO_POINT","x","y","Draggable","onDrag","onDragEnd","style","externalStyle","knobStyle","isDisabled","state","setState","isDragging","origin","translation","handleMouseDown","e","stopPropagation","preventDefault","getClientCoordinate","current","handleMouseMove","handleMouseUp","window","addEventListener","removeEventListener","fullClassName","cssStyles","useMemo","buildStyle","onMouseDown","onTouchStart","touches","clientX","clientY","FloatingActionButton","isShown","buttonClassName","isRtl","RoundTimer","duration","onEnd","timeLeft","setTimeLeft","useInterval","prev","styles","root","svg","cx","cy","r","transform","pathLength","AnimatedCounter","formatCountdownShort","DEFAULT_DURATION","CUSTOM_EMOJI_SIZE","REM","Notification","notification","actions","getActions","useLang","localId","message","action","actionText","cacheBreaker","disableClickDismiss","dismissAction","icon","customEmojiIconId","shouldShowTimer","containerSelector","setIsOpen","timerRef","transitionClassNames","useShowTransitionDeprecated","handleDismiss","dismissNotification","closeAndDismiss","force","setTimeout","ANIMATION_END_DELAY","payload","handleClick","Array","isArray","cb","captureEscKeyListener","clearTimeout","handleMouseEnter","handleMouseLeave","renderedTitle","isLangFnParam","with","renderText","renderedMessage","renderedActionText","Portal","onMouseEnter","onMouseLeave","CustomEmoji","forceAlways","documentId","key","Math","ceil","SIZES","s","m","l","xl","MIN_PROGRESS","ProgressSpinner","progress","square","transparent","noCross","rotationOffset","withColor","canvasRef","progressRef","useStateRef","dpr","useDevicePixelRatio","useDynamicColorListener","growStartedAt","prevProgress","isFirst","growFrom","animate","min","max","Date","now","targetProgress","t","animationFactor","timingFunctions","easeOutQuad","currentProgress","canvas","strokeWidth","shouldInit","centerCoordinate","radius","offset","startAngle","PI","endAngle","ctx","getContext","lineCap","strokeStyle","lineWidth","clearRect","beginPath","arc","stroke","drawSpinnerArc","requestMutation","Radio","subLabelClassName","hidden","onlyInput","withIcon","isLink","onSubLabelClick","dir","Spinner","RadioGroup","loadingOption","onClickAction","RangeSlider","step","bold","renderValue","isCenteredLayout","Number","mainClassName","trackWidth","Fragment","RangeSliderWithMarks","marks","rangeCount","sliderRef","fillPercentage","toFixed","rangeCountIndex","rangeValue","toString","useLayoutEffect","setProperty","mark","isFilled","parseInt","newValue","openTimeout","isFirstTimeActivation","ResponsiveHoverButton","onActivate","buttonProps","isMouseInside","_extends","IS_TOUCH_ENV","SearchInput","resultsItemSelector","inputId","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","canClose","autoFocusSearch","hasUpButton","hasDownButton","teactExperimentControlled","withBackIcon","onStartBackspace","onReset","onFocus","onBlur","onUpClick","onDownClick","onSpinnerClick","inputRef","isInputFocused","markInputFocused","unmarkInputFocused","useFlag","useInputFocusOnOpen","focus","blur","oldLang","handleFocus","element","querySelector","selectionStart","selectionEnd","Transition","shouldCleanup","activeKey","slideClassName","backgroundColor","props","hasArrow","labelText","htmlFor","SelectAvatar","openSystemFilesDialog","ShowMoreButton","count","itemName","itemPluralName","Switcher","inactive","noAnimation","onCheck","TextArea","success","readOnly","inputMode","maxLength","maxLengthIndicator","onInput","onKeyPress","onPaste","noReplaceNewlines","textareaRef","resizeHeight","requestForcedReflow","newHeight","scrollHeight","textarea","previousSelectionEnd","replace","TextTimer","langKey","endsAt","forceUpdate","useForceUpdate","serverTime","getServerTime","isActive","formattedTime","formatMediaDuration","filler","widget","PlaceholderChatInfo","Skeleton","variant","animation","forceAspectRatio","inline","classNames","aspectRatio"],"sourceRoot":""}